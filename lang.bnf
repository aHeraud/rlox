<program>     ::= <statement>* EOF ;

<declaration> ::= <var-decl> | <statement>;
<var-decl>   ::= "var" IDENTIFIER ( "=" <expression> )? ";" ;

<statement>   ::= <expr-stmt>
                | <print-stmt>
                | <block>
                | <if-stmt>
                | <while-stmt>
                | <for-stmt>
<block>       ::= "{" <declaration>* "}" ;
<expr-stmt>    ::= <expression> ";" ;
<print-stmt>   ::= "print" <expression> ";" ;
<if-stmt>      ::= "if" "(" <expression> ")" <statement> ( "else" <statement> )? ;
<while-stmt>   ::= "while" "(" <expression> ")" <statement> ;
<for-stmt>     ::= "for" "(" ( <var-decl> | <expr-stmt> | ";" )
                    <expression>? ";"
                    <expression>? ")" <statement> ;

<expression>  ::= <assignment> ;
<assignment>  ::= IDENTIFIER "=" <assignment>
                | <logic-or> ;
<logic-or>    ::= <logic-or> ( "or" <logic-and> )* ;
<logic-and>   ::= <equality> ( "and" <equality> )* ;
<equality>    ::= <comparison> ( ( "!=" | "==" ) <comparison> )* ;
<comparison>  ::= <term> ( ( ">" | ">=" | "<" | "<=" ) <term> )* ;
<term>        ::= <factor> ( ( "-" | "+" ) <factor> )* ;
<factor>      ::= <unary> ( ( "/" | "*" ) <unary> )* ;
<unary>       ::= ( "!" | "-" ) <unary>
                | primary ;
<primary>     ::= NUMBER | STRING | "true" | "false" | "nil"
                | "(" expression ")"
                | IDENTIFIER ;
